{"version":3,"sources":["../src/extractLocale.js"],"names":["extractLocaleOrNull","resourcePath","localeInterpolate","value","re","result","match","toString","EXTRACTORS","loaderContext","options","locale","defaultLocale","extractor","extractedLocale"],"mappings":";;;;;;;;;;AAAA;;AAKA;;;;;;AAEA;;;;;;AAMA,IAAMA,sBAAsB,SAAtBA,mBAAsB,CAACC,YAAD,EAAeC,iBAAf,EAAqC;AAC7D,QAAIC,QAAQ,IAAZ;;AAD6D;AAAA;AAAA;;AAAA;AAG7D,wDAAiBD,iBAAjB,4GAAoC;AAAA,gBAAzBE,EAAyB;;AAChC,gBAAMC,SAASJ,aAAaK,KAAb,CAAmBF,EAAnB,CAAf;;AAEA,gBAAIC,WAAW,IAAf,EAAqB;AACjBF,wBAAQE,OAAOE,QAAP,EAAR;AACA;AACH;AACJ;AAV4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAY7D,WAAOJ,KAAP;AACH,CAbD;;AAeA;;;;AAIA;AACA,IAAMK,aAAa;AACf;;;;;AAKA,UAACP,YAAD,EAAeC,iBAAf;AAAA,WAAqCF,oBAAoB,oBAASC,YAAT,CAApB,EAA4CC,iBAA5C,CAArC;AAAA,CANe;;AAQf;;;;;AAKA,UAACD,YAAD,EAAeC,iBAAf;AAAA,WAAqCF,oBAAoB,mBAAQC,YAAR,aAApB,EAAiDC,iBAAjD,CAArC;AAAA,CAbe,CAAnB;;AAgBA;;;;;;kBAKe,UAACO,aAAD,EAAgBC,OAAhB,EAA4B;AACvC,QAAIC,SAASD,QAAQE,aAArB;;AADuC;AAAA;AAAA;;AAAA;AAGvC,yDAAwBJ,UAAxB,iHAAoC;AAAA,gBAAzBK,SAAyB;;AAChC,gBAAMC,kBAAkBD,UAAUJ,cAAcR,YAAxB,EAAsCS,QAAQR,iBAA9C,CAAxB;;AAEA,gBAAIY,oBAAoB,IAAxB,EAA8B;AAC1BH,yBAASG,eAAT;AACA;AACH;AACJ;AAVsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYvC,WAAO,+BAAgBH,MAAhB,CAAP;AACH,C","file":"extractLocale.js","sourcesContent":["import {\r\n    basename,\r\n    dirname,\r\n    sep\r\n} from 'path';\r\nimport normalizeLocale from './normalizeLocale';\r\n\r\n/**\r\n * @private\r\n * @param {String} resourcePath\r\n * @param {RegExp[]} localeInterpolate\r\n * @returns {String}\r\n */\r\nconst extractLocaleOrNull = (resourcePath, localeInterpolate) => {\r\n    let value = null;\r\n\r\n    for (const re of localeInterpolate) {\r\n        const result = resourcePath.match(re);\r\n\r\n        if (result !== null) {\r\n            value = result.toString();\r\n            break;\r\n        }\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\n/**\r\n * @private\r\n * @type {Function[]}\r\n */\r\n// eslint-disable-line valid-jsdoc\r\nconst EXTRACTORS = [\r\n    /**\r\n     * @param {String} resourcePath\r\n     * @param {RegExp[]} localeInterpolate\r\n     * @returns {String}\r\n     */\r\n    (resourcePath, localeInterpolate) => extractLocaleOrNull(basename(resourcePath), localeInterpolate),\r\n\r\n    /**\r\n     * @param {String} resourcePath\r\n     * @param {RegExp[]} localeInterpolate\r\n     * @returns {String}\r\n     */\r\n    (resourcePath, localeInterpolate) => extractLocaleOrNull(dirname(resourcePath) + sep, localeInterpolate)\r\n];\r\n\r\n/**\r\n * @param {*} loaderContext\r\n * @param {Object} options\r\n * @returns {String}\r\n */\r\nexport default (loaderContext, options) => {\r\n    let locale = options.defaultLocale;\r\n\r\n    for (const extractor of EXTRACTORS) {\r\n        const extractedLocale = extractor(loaderContext.resourcePath, options.localeInterpolate);\r\n\r\n        if (extractedLocale !== null) {\r\n            locale = extractedLocale;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return normalizeLocale(locale);\r\n};\r\n"]}