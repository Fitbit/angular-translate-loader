{"version":3,"sources":["../src/interpolateOptionsValue.js"],"names":["key","loaderContext","content","options","value","Array","isArray","join","sep"],"mappings":";;;;;;AAAA;;AAGA;;;;;;AAEA;;;;;;;;kBAQe,UAACA,GAAD,EAAMC,aAAN,EAAqBC,OAArB,EAA8BC,OAA9B,EAA0C;AACrD,QAAIC,QAAQD,QAAQH,GAAR,CAAZ;;AAEA,QAAIK,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtBA,gBAAQA,MAAMG,IAAN,CAAWJ,QAAQK,GAAnB,CAAR;AACH;;AAED,QAAI,CAAC,qBAAQJ,KAAR,CAAL,EAAqB;AACjBA,gBAAQ,gCAAiBA,KAAjB,EAAwBH,aAAxB,EAAuCC,OAAvC,EAAgDC,OAAhD,CAAR;AACH;;AAED,WAAOC,KAAP;AACH,C","file":"interpolateOptionsValue.js","sourcesContent":["import {\r\n    isEmpty\r\n} from 'lodash';\r\nimport interpolateValue from './interpolateValue';\r\n\r\n/**\r\n * @private\r\n * @param {String} key\r\n * @param {*} loaderContext\r\n * @param {*} content\r\n * @param {Object} options\r\n * @returns {String}\r\n */\r\nexport default (key, loaderContext, content, options) => {\r\n    let value = options[key];\r\n\r\n    if (Array.isArray(value)) {\r\n        value = value.join(options.sep);\r\n    }\r\n\r\n    if (!isEmpty(value)) {\r\n        value = interpolateValue(value, loaderContext, content, options);\r\n    }\r\n\r\n    return value;\r\n};\r\n"]}