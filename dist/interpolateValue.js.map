{"version":3,"sources":["../src/interpolateValue.js"],"names":["INTERPOLATIONS","context","resourcePath","replace","value","loaderContext","content","options","regExp","name","interpolation","regexp","RegExp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAKA;;AAKA;;;;AAIA;;;;AAIA,IAAMA,iBAAiB;AACnB;;;;;;AAMA,aAAS,aAACC,OAAD,EAAUC,YAAV;AAAA,eAA2B,kBAAK,mBAAQ,mBAAQA,YAAR,EAAsBC,OAAtB,CAA8B,mBAAQF,OAAR,CAA9B,EAAgD,EAAhD,CAAR,CAAL,YAA3B;AAAA;AAPU,CAAvB;;AAUA;;;;;;;;kBAOe,UAACG,KAAD,EAAQC,aAAR,EAAuBC,OAAvB,EAAgCC,OAAhC,EAA4C;AACvD,QAAMN,UAAUM,QAAQN,OAAR,IAAmBI,cAAcE,OAAd,CAAsBN,OAAzC,IAAoD,IAApE;;AAEAG,YAAQ,kCAAgBC,aAAhB,EAA+BD,KAA/B,EAAsC;AAC1CH,iBAASA,OADiC;AAE1CK,iBAAS,sBAASA,OAAT,IAAoB,yBAAeA,OAAf,CAApB,GAA8CA,OAFb;AAG1CE,gBAAQD,QAAQC;AAH0B,KAAtC,CAAR;;AAHuD;AAAA;AAAA;;AAAA;AASvD,wDAAoC,uBAAeR,cAAf,CAApC,4GAAoE;AAAA;;AAAA;;AAAA,gBAAxDS,IAAwD;AAAA,gBAAlDC,aAAkD;;AAChE,gBAAMC,SAAS,IAAIC,MAAJ,CAAW,0BAAaH,IAAb,CAAX,EAA+B,GAA/B,CAAf;;AAEAL,oBAAQA,MAAMD,OAAN,CAAcQ,MAAd,EAAsBD,cAAcT,OAAd,EAAuBI,cAAcH,YAArC,CAAtB,CAAR;AACH;AAbsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAevD,WAAOE,KAAP;AACH,C","file":"interpolateValue.js","sourcesContent":["import {\r\n    isObject,\r\n    escapeRegExp,\r\n    trim\r\n} from 'lodash';\r\nimport {\r\n    sep,\r\n    dirname,\r\n    resolve\r\n} from 'path';\r\nimport {\r\n    interpolateName\r\n} from 'loader-utils';\r\n\r\n/**\r\n * @private\r\n * @type {Object<String,Function>}\r\n */\r\nconst INTERPOLATIONS = {\r\n    /**\r\n     * @private\r\n     * @param {String} context\r\n     * @param {String} resourcePath\r\n     * @returns {String}\r\n     */\r\n    '[dir]': (context, resourcePath) => trim(dirname(resolve(resourcePath).replace(resolve(context), '')), sep)\r\n};\r\n\r\n/**\r\n * @param {String} value\r\n * @param {*} loaderContext\r\n * @param {*} content\r\n * @param {Object} options\r\n * @returns {String}\r\n */\r\nexport default (value, loaderContext, content, options) => {\r\n    const context = options.context || loaderContext.options.context || './';\r\n\r\n    value = interpolateName(loaderContext, value, {\r\n        context: context,\r\n        content: isObject(content) ? JSON.stringify(content) : content,\r\n        regExp: options.regExp\r\n    });\r\n\r\n    for (const [name, interpolation] of Object.entries(INTERPOLATIONS)) {\r\n        const regexp = new RegExp(escapeRegExp(name), 'g');\r\n\r\n        value = value.replace(regexp, interpolation(context, loaderContext.resourcePath));\r\n    }\r\n\r\n    return value;\r\n};\r\n"]}