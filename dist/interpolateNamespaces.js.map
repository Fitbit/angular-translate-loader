{"version":3,"sources":["../src/interpolateNamespaces.js"],"names":["loaderContext","content","options","value","split","join","sep"],"mappings":";;;;;;AAAA;;AAGA;;AAGA;;;;;;AAEA;;;;;;kBAMe,UAACA,aAAD,EAAgBC,OAAhB,EAAyBC,OAAzB,EAAqC;AAChD,QAAIC,QAAQ,uCAAwB,YAAxB,EAAsCH,aAAtC,EAAqDC,OAArD,EAA8DC,OAA9D,CAAZ;;AAEA,QAAI,CAAC,qBAAQC,KAAR,CAAL,EAAqB;AACjBA,gBAAQA,MAAMC,KAAN,YAAiBC,IAAjB,CAAsBH,QAAQI,GAA9B,IAAqCJ,QAAQI,GAArD;AACH;;AAED,WAAOH,KAAP;AACH,C","file":"interpolateNamespaces.js","sourcesContent":["import {\r\n    isEmpty\r\n} from 'lodash';\r\nimport {\r\n    sep\r\n} from 'path';\r\nimport interpolateOptionsValue from './interpolateOptionsValue';\r\n\r\n/**\r\n * @param {*} loaderContext\r\n * @param {*} content\r\n * @param {Object} options\r\n * @returns {String}\r\n */\r\nexport default (loaderContext, content, options) => {\r\n    let value = interpolateOptionsValue('namespaces', loaderContext, content, options);\r\n\r\n    if (!isEmpty(value)) {\r\n        value = value.split(sep).join(options.sep) + options.sep;\r\n    }\r\n\r\n    return value;\r\n};\r\n"]}